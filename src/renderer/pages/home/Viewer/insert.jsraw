const { ipcRenderer, ipcMain } = require('electron')
let selectDom = null
// eslint-disable-next-line no-unused-vars
var selectPlugin = {

  startSelect: function () {
    document.body.style.cursor = 'crosshair'
    this.addEvent(document.body, 'mouseover', this.mouseOverHandler)
    this.addEvent(document.body, 'mouseout', this.mouseOutHandler)
  },

  stopSelect: function () {
    document.body.style.cursor = 'auto'
    this.removeEvent(document.body, 'mouseover', this.mouseOverHandler)
    this.removeEvent(document.body, 'mouseout', this.mouseOutHandler)
  },

  mouseOverHandler: function (e) {
    e.stopPropagation()
    e.target.style.backgroundColor = 'rgb(160,191,232)'
    selectDom = e.target
  },

  mouseOutHandler: function (e) {
    e.stopPropagation()
    e.target.style.backgroundColor = ''
  },

  addEvent: function (element, eventName, handler) {
    element.addEventListener(eventName, handler, false)
  },

  removeEvent: function (element, eventName, handler) {
    element.removeEventListener(eventName, handler, false)
  },

  select: function () {
    const selector = this.getUniqueSelect(selectDom)
    ipcRenderer.sendToHost('selector', selector)
  },

  clearAjaxList: function () {
    window.currentPageAjaxInfo = null
  },

  getUniqueSelect: function (element) {
    if (element.id !== "") {//判断id属性，如果这个元素有id，则显 示//*[@id="xPath"]  形式内容
        return '//*[@id=\"' + element.id + '\"]';
    }
    //这里需要需要主要字符串转译问题，可参考js 动态生成html时字符串和变量转译（注意引号的作用）
    if (element == document.body) {//递归到body处，结束递归
        return '/html/' + element.tagName.toLowerCase();
    }
    var ix = 1,//在nodelist中的位置，且每次点击初始化
         siblings = element.parentNode.childNodes;//同级的子元素

    for (var i = 0, l = siblings.length; i < l; i++) {
        var sibling = siblings[i];
        //如果这个元素是siblings数组中的元素，则执行递归操作
        if (sibling == element) {
            return arguments.callee(element.parentNode) + '/' + element.tagName.toLowerCase() + '[' + (ix) + ']';
            //如果不符合，判断是否是element元素，并且是否是相同元素，如果是相同的就开始累加
        } else if (sibling.nodeType == 1 && sibling.tagName == element.tagName) {
            ix++;
        }
    }
  },

  getUniqueSelectOld: function (node) {
    let path
    while (node) {
      let name = node.localName
      if (name) {
        name = name.toLowerCase()
        const parent = node.parentElement
        let reChildrenNode = []
        const childNodes = (parent && parent.childNodes) || []
        for (let i = 0; i < childNodes.length; i++) {
          if (childNodes[i].nodeName.toLowerCase() === name && !/\s/.test(childNodes.nodeValue)) {
            reChildrenNode.push(childNodes[i])
          }
        }
        if (reChildrenNode.length > 1) {
          const index = reChildrenNode.indexOf(node) + 1
          name += ':nth-of-type(' + index + ')'
        }
        path = name + (path ? '>' + path : '')
        node = parent
      }
    }
    return path
  }
}

;(function () {
    function ajaxEventTrigger (event, params) {
      var ajaxEvent = new CustomEvent(event, { detail: this });
      if (!window.currentPageAjaxInfo) {
        window['currentPageAjaxInfo'] = {}
      }
      if (event === 'ajaxLoadEnd') { // 此时具有返回值
        const { target } = params[0]
        const { responseURL, response } = target
        response['isXhrResult'] = true
        const key = responseURL.split('?')[0].split(location.host)[1]
        const value = JSON.parse(response)
        window.currentPageAjaxInfo[key] = value
        // console.log('最新的请求接口与结果的映射' + JSON.stringify(window.currentPageAjaxInfo))
        // ipcRenderer.send('ajaxListened', window.currentPageAjaxInfo)
        ipcRenderer.sendToHost('ajaxListened', window.currentPageAjaxInfo)
      }
      window.dispatchEvent(ajaxEvent);
    }
    var oldXHR = window.XMLHttpRequest;
    function newXHR () {
      var realXHR = new oldXHR();
      realXHR.addEventListener('loadend', function (...params) { ajaxEventTrigger.call(this, 'ajaxLoadEnd', params); }, false);
      realXHR.addEventListener('readystatechange', function (...params) { ajaxEventTrigger.call(this, 'ajaxReadyStateChange', params); }, false);
      return realXHR;
    }
    window.XMLHttpRequest = newXHR;
  })();
